@using BankManagement.ViewModels
@model PostTransferViewModel

@{
    ViewData["Title"] = "ConfirmTransfer";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<head>
    <link href="./css/Common/CommonStyle.css" rel="stylesheet" />
</head>
<body>
    <br />
    <br />

    <form asp-action="PostTransfer">



        <table align="center">
            <tr>
                <td>
                    <h5>Sender Account Details</h5>
                </td>
            </tr>
        </table>
        <table class="styled-table">

            <thead>
                <tr>
                    <th> Account ID</th>
                    <th> Customer ID</th>
                    <th> Account Type</th>
                    <th> Balance </th>
                    <th> Last Updated</th>
                </tr>
            </thead>

            <tbody>
                <tr>
                    <td asp-for="SAID">@Model.sender.AID</td>
                    <td>@Model.sender.CID</td>
                    <td>@Model.sender.AccountType</td>
                    <td>@Model.sender.Balance</td>
                    <td>@Model.sender.LastUpdated</td>


                </tr>
            </tbody>
        </table>
        <br />
        <br />

        <table align="center">
            <tr>
                <td>
                    <h5>Receiver Account Details</h5>
                </td>
            </tr>
        </table>

        <table class="styled-table">
            <thead>
                <tr>
                    <th> Account ID</th>
                    <th> Customer ID</th>
                    <th> Account Type</th>
                    <th> Balance </th>
                    <th> Last Updated</th>
                </tr>
            </thead>

            <tbody>
                <tr>
                    <td asp-for="RAID">@Model.receiver.AID</td>
                    <td>@Model.receiver.CID</td>
                    <td>@Model.receiver.AccountType</td>
                    <td>@Model.receiver.Balance</td>
                    <td>@Model.receiver.LastUpdated</td>

                </tr>
            </tbody>
        </table>

        <br />
        <br />

        <table align="center">

            <tr>

                <td>
                    <div class="input-group input-group-mb mb-3 col-xs-3">
                        <div class="input-group-prepend">
                            <span class="input-group-text" id="inputGroup-sizing-sm">Money to Send</span>
                        </div>
                        &nbsp;
                        <input required type="number" asp-for="moneyToSend" id="Name" class="form-control" aria-label="Small" aria-describedby="inputGroup-sizing-sm">
                        &nbsp;
                        <div class="input-group-prepend">
                            <span style="color:red;" asp-validation-for="moneyToSend" class="input-group-text" id="inputGroup-sizing-sm"></span>
                        </div>
                    </div>

                </td>
            </tr>
        </table>

        @Html.HiddenFor(x => x.moneyToSend)
        @Html.HiddenFor(x => x.SID)
        @Html.HiddenFor(x => x.RID)

        <br />



        <table align="center">
            <tr>
                <td>
                    <button type="submit" class="btn btn-success btn-lg">Confirm Details and Transfer</button>
                </td>
            </tr>
        </table>
    </form>
</body>


          



@if (ViewData["NegativeBalance"] != null)
{

    @if (ViewData["NegativeBalance"].Equals("Display"))
    {
        <table align="center">
            <tr>
                <td>
                    <button type="button" class="btn btn-danger btn-sm"> Money to be sent cannot be negative </button>
                </td>
            </tr>
        </table>

    }
}

@if (ViewData["BalanceSuccessMessage"] != null)
{
    @if (ViewData["BalanceSuccessMessage"].Equals("Display"))
    {
        <table align="center">
            <tr>
                <td>
                    <button type="button" class="btn btn-dark btn-sm"> Amount transferred successfully </button>
                </td>
            </tr>
        </table>

    }

}

@if (ViewData["BalanceFailMessage"] != null)
{
    @if (ViewData["BalanceFailMessage"].Equals("Display"))
    {
        <table align="center">
            <tr>
                <td>
                    <button type="button" class="btn btn-danger btn-sm"> Transfer Failed! </button>
                </td>
            </tr>
        </table>

    }
}

@if (ViewData["ZeroBalance"] != null)
{
    @if (ViewData["ZeroBalance"].Equals("Display"))
    {
        <table align="center">
            <tr>
                <td>
                    <button type="button" class="btn btn-danger btn-sm"> Money to be sent cannot be zero! </button>
                </td>
            </tr>
        </table>

    }
}

@if (ViewData["NotEnoughFunds"] != null)
{
    @if (ViewData["NotEnoughFunds"].Equals("Display"))
    {
        <table align="center">
            <tr>
                <td>
                    <button type="button" class="btn btn-danger btn-sm"> Not enough funds, please choose smaller amount ! </button>
                </td>
            </tr>
        </table>

    }
}


